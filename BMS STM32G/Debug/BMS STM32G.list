
BMS STM32G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800340c  0800340c  0000440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003494  08003494  00004494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800349c  0800349c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0000449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034a0  080034a0  000044a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080034b0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080034b0  00005188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee56  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec8  00000000  00000000  00013e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00015d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e7  00000000  00000000  00016a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cfa  00000000  00000000  00017407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010122  00000000  00000000  00019101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b488e  00000000  00000000  00029223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ddc  00000000  00000000  000ddaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e08d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080033f4 	.word	0x080033f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080033f4 	.word	0x080033f4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 faea 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f80a 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f934 	bl	8000894 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800062c:	f000 f85e 	bl	80006ec <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000630:	f000 f8a4 	bl	800077c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f8e0 	bl	80007f8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	e7fd      	b.n	8000638 <main+0x1c>

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b095      	sub	sp, #84	@ 0x54
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2414      	movs	r4, #20
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	233c      	movs	r3, #60	@ 0x3c
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 fea5 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	0018      	movs	r0, r3
 8000656:	2310      	movs	r3, #16
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 fe9e 	bl	800339c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 ff55 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	0252      	lsls	r2, r2, #9
 8000676:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	0021      	movs	r1, r4
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2203      	movs	r2, #3
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2210      	movs	r2, #16
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	0292      	lsls	r2, r2, #10
 8000698:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2280      	movs	r2, #128	@ 0x80
 800069e:	0492      	lsls	r2, r2, #18
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	0592      	lsls	r2, r2, #22
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 ff7d 	bl	80015ac <HAL_RCC_OscConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006b6:	f000 f91b 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2202      	movs	r2, #2
 80006c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2102      	movs	r1, #2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fac8 	bl	8001c6c <HAL_RCC_ClockConfig>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006e0:	f000 f906 	bl	80008f0 <Error_Handler>
  }
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b015      	add	sp, #84	@ 0x54
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 80006f2:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <MX_FDCAN1_Init+0x8c>)
 80006f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 800070a:	2200      	movs	r2, #0
 800070c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 800071c:	2210      	movs	r2, #16
 800071e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000722:	2201      	movs	r2, #1
 8000724:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000728:	2202      	movs	r2, #2
 800072a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 800072e:	2202      	movs	r2, #2
 8000730:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000734:	2201      	movs	r2, #1
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 800073a:	2201      	movs	r2, #1
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000740:	2201      	movs	r2, #1
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000746:	2201      	movs	r2, #1
 8000748:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 800074c:	2200      	movs	r2, #0
 800074e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000756:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <MX_FDCAN1_Init+0x88>)
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fb9a 	bl	8000e98 <HAL_FDCAN_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000768:	f000 f8c2 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	20000028 	.word	0x20000028
 8000778:	40006400 	.word	0x40006400

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_SPI1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <MX_SPI1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_SPI1_Init+0x74>)
 8000788:	2282      	movs	r2, #130	@ 0x82
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_SPI1_Init+0x74>)
 8000796:	22f0      	movs	r2, #240	@ 0xf0
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_SPI1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	02d2      	lsls	r2, r2, #11
 80007ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007ca:	2207      	movs	r2, #7
 80007cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <MX_SPI1_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fe2b 	bl	8002438 <HAL_SPI_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f883 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_USART1_UART_Init+0x94>)
 80007fe:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <MX_USART1_UART_Init+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000804:	22e1      	movs	r2, #225	@ 0xe1
 8000806:	0252      	lsls	r2, r2, #9
 8000808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_USART1_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_USART1_UART_Init+0x94>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_USART1_UART_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USART1_UART_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000842:	0018      	movs	r0, r3
 8000844:	f001 feb0 	bl	80025a8 <HAL_UART_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800084c:	f000 f850 	bl	80008f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fcc1 	bl	80031dc <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800085e:	f000 f847 	bl	80008f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000864:	2100      	movs	r1, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f002 fcf8 	bl	800325c <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000870:	f000 f83e 	bl	80008f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_USART1_UART_Init+0x94>)
 8000876:	0018      	movs	r0, r3
 8000878:	f002 fc76 	bl	8003168 <HAL_UARTEx_DisableFifoMode>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 f836 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	200000f0 	.word	0x200000f0
 8000890:	40013800 	.word	0x40013800

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_GPIO_Init+0x58>)
 800089c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008a0:	2104      	movs	r1, #4
 80008a2:	430a      	orrs	r2, r1
 80008a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008aa:	2204      	movs	r2, #4
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008b8:	2120      	movs	r1, #32
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c2:	2220      	movs	r2, #32
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d6:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <MX_GPIO_Init+0x58>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <HAL_MspInit+0x4c>)
 8000904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	641a      	str	r2, [r3, #64]	@ 0x40
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <HAL_MspInit+0x4c>)
 800091c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_MspInit+0x4c>)
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	0549      	lsls	r1, r1, #21
 8000924:	430a      	orrs	r2, r1
 8000926:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <HAL_MspInit+0x4c>)
 800092a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	055b      	lsls	r3, r3, #21
 8000930:	4013      	ands	r3, r2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000936:	23c0      	movs	r3, #192	@ 0xc0
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f9e2 	bl	8000d04 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b09d      	sub	sp, #116	@ 0x74
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	235c      	movs	r3, #92	@ 0x5c
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 fd1c 	bl	800339c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	2410      	movs	r4, #16
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	234c      	movs	r3, #76	@ 0x4c
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f002 fd14 	bl	800339c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <HAL_FDCAN_MspInit+0xb8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d13e      	bne.n	80009fc <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	0492      	lsls	r2, r2, #18
 8000984:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2200      	movs	r2, #0
 800098a:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fb16 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000998:	f7ff ffaa 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 800099e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 80009a2:	2180      	movs	r1, #128	@ 0x80
 80009a4:	0149      	lsls	r1, r1, #5
 80009a6:	430a      	orrs	r2, r1
 80009a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 80009ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	015b      	lsls	r3, r3, #5
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 80009ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 80009be:	2104      	movs	r1, #4
 80009c0:	430a      	orrs	r2, r1
 80009c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 80009c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c8:	2204      	movs	r2, #4
 80009ca:	4013      	ands	r3, r2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC4     ------> FDCAN1_RX
    PC5     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009d0:	215c      	movs	r1, #92	@ 0x5c
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2230      	movs	r2, #48	@ 0x30
 80009d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2202      	movs	r2, #2
 80009dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2203      	movs	r2, #3
 80009ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 80009f4:	0019      	movs	r1, r3
 80009f6:	0010      	movs	r0, r2
 80009f8:	f000 fc20 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b01d      	add	sp, #116	@ 0x74
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	40006400 	.word	0x40006400
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	50000800 	.word	0x50000800

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	@ 0x2c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	2414      	movs	r4, #20
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f002 fcba 	bl	800339c <memset>
  if(hspi->Instance==SPI1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d130      	bne.n	8000a94 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0149      	lsls	r1, r1, #5
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8000a66:	0021      	movs	r1, r4
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2256      	movs	r2, #86	@ 0x56
 8000a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2202      	movs	r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	187a      	adds	r2, r7, r1
 8000a88:	23a0      	movs	r3, #160	@ 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fbd4 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b00b      	add	sp, #44	@ 0x2c
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b09d      	sub	sp, #116	@ 0x74
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	235c      	movs	r3, #92	@ 0x5c
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2314      	movs	r3, #20
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f002 fc70 	bl	800339c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	2410      	movs	r4, #16
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	234c      	movs	r3, #76	@ 0x4c
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f002 fc68 	bl	800339c <memset>
  if(huart->Instance==USART1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <HAL_UART_MspInit+0xbc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d13f      	bne.n	8000b56 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fa6b 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aee:	f7ff feff 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_UART_MspInit+0xc0>)
 8000af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <HAL_UART_MspInit+0xc0>)
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	01c9      	lsls	r1, r1, #7
 8000afc:	430a      	orrs	r2, r1
 8000afe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_UART_MspInit+0xc0>)
 8000b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	01db      	lsls	r3, r3, #7
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_UART_MspInit+0xc0>)
 8000b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xc0>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	430a      	orrs	r2, r1
 8000b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_UART_MspInit+0xc0>)
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b26:	215c      	movs	r1, #92	@ 0x5c
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	22c0      	movs	r2, #192	@ 0xc0
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2202      	movs	r2, #2
 8000b34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2201      	movs	r2, #1
 8000b46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	23a0      	movs	r3, #160	@ 0xa0
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 fb73 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b01d      	add	sp, #116	@ 0x74
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f89c 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba8:	f7ff fff7 	bl	8000b9a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf0 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd2:	f002 fbeb 	bl	80033ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bd6:	f7ff fd21 	bl	800061c <main>

08000bda <LoopForever>:

LoopForever:
  b LoopForever
 8000bda:	e7fe      	b.n	8000bda <LoopForever>
  ldr   r0, =_estack
 8000bdc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be8:	080034a4 	.word	0x080034a4
  ldr r2, =_sbss
 8000bec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf0:	20000188 	.word	0x20000188

08000bf4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_COMP_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_Init+0x3c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_Init+0x3c>)
 8000c0a:	2180      	movs	r1, #128	@ 0x80
 8000c0c:	0049      	lsls	r1, r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 f810 	bl	8000c38 <HAL_InitTick>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e001      	b.n	8000c28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe6a 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <HAL_InitTick+0x88>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d02b      	beq.n	8000ca8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <HAL_InitTick+0x8c>)
 8000c52:	681c      	ldr	r4, [r3, #0]
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <HAL_InitTick+0x88>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	23fa      	movs	r3, #250	@ 0xfa
 8000c5c:	0098      	lsls	r0, r3, #2
 8000c5e:	f7ff fa51 	bl	8000104 <__udivsi3>
 8000c62:	0003      	movs	r3, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff fa4c 	bl	8000104 <__udivsi3>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f905 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d112      	bne.n	8000c9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d80a      	bhi.n	8000c94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f8e4 	bl	8000e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_InitTick+0x90>)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e00d      	b.n	8000cb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e008      	b.n	8000cb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e003      	b.n	8000cb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b005      	add	sp, #20
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	18d2      	adds	r2, r2, r3
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_IncTick+0x20>)
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000184 	.word	0x20000184

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	@ (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	20000184 	.word	0x20000184

08000d04 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	0019      	movs	r1, r3
 8000d16:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	fffff9ff 	.word	0xfffff9ff

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d44:	d828      	bhi.n	8000d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4a2f      	ldr	r2, [pc, #188]	@ (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	33c0      	adds	r3, #192	@ 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	589b      	ldr	r3, [r3, r2]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	@ 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	@ 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	481f      	ldr	r0, [pc, #124]	@ (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	33c0      	adds	r3, #192	@ 0xc0
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e031      	b.n	8000dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	400b      	ands	r3, r1
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3306      	adds	r3, #6
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	@ 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	@ 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	001c      	movs	r4, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18c3      	adds	r3, r0, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	045b      	lsls	r3, r3, #17
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d301      	bcc.n	8000e24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e20:	2301      	movs	r3, #1
 8000e22:	e010      	b.n	8000e46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <SysTick_Config+0x44>)
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	2103      	movs	r1, #3
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff ff7c 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <SysTick_Config+0x44>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SysTick_Config+0x44>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ffbf 	bl	8000e0c <SysTick_Config>
 8000e8e:	0003      	movs	r3, r0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e14e      	b.n	8001148 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	225c      	movs	r2, #92	@ 0x5c
 8000eae:	5c9b      	ldrb	r3, [r3, r2]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d107      	bne.n	8000ec6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	225d      	movs	r2, #93	@ 0x5d
 8000eba:	2100      	movs	r1, #0
 8000ebc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fd43 	bl	800094c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	699a      	ldr	r2, [r3, #24]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed6:	f7ff ff0b 	bl	8000cf0 <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ede:	e012      	b.n	8000f06 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ee0:	f7ff ff06 	bl	8000cf0 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90b      	bls.n	8000f06 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	225c      	movs	r2, #92	@ 0x5c
 8000efe:	2103      	movs	r1, #3
 8000f00:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e120      	b.n	8001148 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d0e5      	beq.n	8000ee0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	430a      	orrs	r2, r1
 8000f22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff fee4 	bl	8000cf0 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f2c:	e012      	b.n	8000f54 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f2e:	f7ff fedf 	bl	8000cf0 <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b0a      	cmp	r3, #10
 8000f3a:	d90b      	bls.n	8000f54 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f40:	2201      	movs	r2, #1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	225c      	movs	r2, #92	@ 0x5c
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0f9      	b.n	8001148 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d0e6      	beq.n	8000f2e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a76      	ldr	r2, [pc, #472]	@ (8001150 <HAL_FDCAN_Init+0x2b8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000f7a:	4a76      	ldr	r2, [pc, #472]	@ (8001154 <HAL_FDCAN_Init+0x2bc>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7c1b      	ldrb	r3, [r3, #16]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2140      	movs	r1, #64	@ 0x40
 8000f96:	438a      	bics	r2, r1
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	e007      	b.n	8000fac <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2140      	movs	r1, #64	@ 0x40
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7c5b      	ldrb	r3, [r3, #17]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d109      	bne.n	8000fc8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	01c9      	lsls	r1, r1, #7
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	619a      	str	r2, [r3, #24]
 8000fc6:	e007      	b.n	8000fd8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	699a      	ldr	r2, [r3, #24]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4961      	ldr	r1, [pc, #388]	@ (8001158 <HAL_FDCAN_Init+0x2c0>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7c9b      	ldrb	r3, [r3, #18]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d108      	bne.n	8000ff2 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	495c      	ldr	r1, [pc, #368]	@ (800115c <HAL_FDCAN_Init+0x2c4>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	e008      	b.n	8001004 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	699a      	ldr	r2, [r3, #24]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0149      	lsls	r1, r1, #5
 8001000:	430a      	orrs	r2, r1
 8001002:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a55      	ldr	r2, [pc, #340]	@ (8001160 <HAL_FDCAN_Init+0x2c8>)
 800100c:	4013      	ands	r3, r2
 800100e:	0019      	movs	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	699a      	ldr	r2, [r3, #24]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	21a4      	movs	r1, #164	@ 0xa4
 8001028:	438a      	bics	r2, r1
 800102a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2110      	movs	r1, #16
 8001038:	438a      	bics	r2, r1
 800103a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d108      	bne.n	8001056 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699a      	ldr	r2, [r3, #24]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2104      	movs	r1, #4
 8001050:	430a      	orrs	r2, r1
 8001052:	619a      	str	r2, [r3, #24]
 8001054:	e02c      	b.n	80010b0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d028      	beq.n	80010b0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d01c      	beq.n	80010a0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2180      	movs	r1, #128	@ 0x80
 8001072:	430a      	orrs	r2, r1
 8001074:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2110      	movs	r1, #16
 8001082:	430a      	orrs	r2, r1
 8001084:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d110      	bne.n	80010b0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2120      	movs	r1, #32
 800109a:	430a      	orrs	r2, r1
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	e007      	b.n	80010b0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2120      	movs	r1, #32
 80010ac:	430a      	orrs	r2, r1
 80010ae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	3b01      	subs	r3, #1
 80010be:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010c0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010c8:	431a      	orrs	r2, r3
 80010ca:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010d8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010da:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	23c0      	movs	r3, #192	@ 0xc0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d115      	bne.n	8001114 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f2:	3b01      	subs	r3, #1
 80010f4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010f6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	3b01      	subs	r3, #1
 80010fe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001100:	431a      	orrs	r2, r3
 8001102:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	3b01      	subs	r3, #1
 800110a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001110:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001112:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	22c0      	movs	r2, #192	@ 0xc0
 800111a:	5899      	ldr	r1, [r3, r2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	21c0      	movs	r1, #192	@ 0xc0
 8001128:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0018      	movs	r0, r3
 800112e:	f000 f819 	bl	8001164 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	225c      	movs	r2, #92	@ 0x5c
 8001142:	2101      	movs	r1, #1
 8001144:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40006400 	.word	0x40006400
 8001154:	40006500 	.word	0x40006500
 8001158:	ffffbfff 	.word	0xffffbfff
 800115c:	ffffefff 	.word	0xffffefff
 8001160:	fffffcff 	.word	0xfffffcff

08001164 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800116e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a2e      	ldr	r2, [pc, #184]	@ (8001230 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d105      	bne.n	8001186 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	22d4      	movs	r2, #212	@ 0xd4
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4694      	mov	ip, r2
 8001182:	4463      	add	r3, ip
 8001184:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	589b      	ldr	r3, [r3, r2]
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001196:	4013      	ands	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	041a      	lsls	r2, r3, #16
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	2180      	movs	r1, #128	@ 0x80
 80011a8:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3370      	adds	r3, #112	@ 0x70
 80011ae:	001a      	movs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	589b      	ldr	r3, [r3, r2]
 80011bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80011be:	4013      	ands	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c6:	061a      	lsls	r2, r3, #24
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	2180      	movs	r1, #128	@ 0x80
 80011d0:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	33b0      	adds	r3, #176	@ 0xb0
 80011d6:	001a      	movs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3389      	adds	r3, #137	@ 0x89
 80011e0:	33ff      	adds	r3, #255	@ 0xff
 80011e2:	001a      	movs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2298      	movs	r2, #152	@ 0x98
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	189a      	adds	r2, r3, r2
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	229e      	movs	r2, #158	@ 0x9e
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	189a      	adds	r2, r3, r2
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e005      	b.n	8001212 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3304      	adds	r3, #4
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	22d4      	movs	r2, #212	@ 0xd4
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4694      	mov	ip, r2
 800121a:	4463      	add	r3, ip
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3f1      	bcc.n	8001206 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}
 800122c:	4000b400 	.word	0x4000b400
 8001230:	40006800 	.word	0x40006800
 8001234:	ffe0ffff 	.word	0xffe0ffff
 8001238:	f0ffffff 	.word	0xf0ffffff

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e14d      	b.n	80014e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x28>
 8001262:	e13e      	b.n	80014e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	2201      	movs	r2, #1
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d017      	beq.n	800131a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2207      	movs	r2, #7
 8001338:	4013      	ands	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2107      	movs	r1, #7
 8001352:	400b      	ands	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x174>
 80013ae:	e098      	b.n	80014e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013b0:	4a53      	ldr	r2, [pc, #332]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3318      	adds	r3, #24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	589b      	ldr	r3, [r3, r2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	220f      	movs	r2, #15
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	23a0      	movs	r3, #160	@ 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	429a      	cmp	r2, r3
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x1d6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a48      	ldr	r2, [pc, #288]	@ (8001504 <HAL_GPIO_Init+0x2c8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x1d2>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a47      	ldr	r2, [pc, #284]	@ (8001508 <HAL_GPIO_Init+0x2cc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x1ce>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a46      	ldr	r2, [pc, #280]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x1ca>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a45      	ldr	r2, [pc, #276]	@ (8001510 <HAL_GPIO_Init+0x2d4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x1c6>
 80013fe:	2304      	movs	r3, #4
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001402:	2305      	movs	r3, #5
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001412:	2300      	movs	r3, #0
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	2103      	movs	r1, #3
 8001418:	400a      	ands	r2, r1
 800141a:	00d2      	lsls	r2, r2, #3
 800141c:	4093      	lsls	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001424:	4936      	ldr	r1, [pc, #216]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3318      	adds	r3, #24
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	035b      	lsls	r3, r3, #13
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001456:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	039b      	lsls	r3, r3, #14
 8001474:	4013      	ands	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001486:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001488:	2384      	movs	r3, #132	@ 0x84
 800148a:	58d3      	ldr	r3, [r2, r3]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43da      	mvns	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ac:	4914      	ldr	r1, [pc, #80]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80014ae:	2284      	movs	r2, #132	@ 0x84
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014b4:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	58d3      	ldr	r3, [r2, r3]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014da:	4909      	ldr	r1, [pc, #36]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	40da      	lsrs	r2, r3
 80014f0:	1e13      	subs	r3, r2, #0
 80014f2:	d000      	beq.n	80014f6 <HAL_GPIO_Init+0x2ba>
 80014f4:	e6aa      	b.n	800124c <HAL_GPIO_Init+0x10>
  }
}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b006      	add	sp, #24
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021800 	.word	0x40021800
 8001504:	50000400 	.word	0x50000400
 8001508:	50000800 	.word	0x50000800
 800150c:	50000c00 	.word	0x50000c00
 8001510:	50001000 	.word	0x50001000

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001522:	4013      	ands	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d11f      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	0013      	movs	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	189b      	adds	r3, r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4912      	ldr	r1, [pc, #72]	@ (8001590 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fddc 	bl	8000104 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	e008      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e009      	b.n	800157a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	401a      	ands	r2, r3
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	429a      	cmp	r2, r3
 8001576:	d0ed      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	40007000 	.word	0x40007000
 8001588:	fffff9ff 	.word	0xfffff9ff
 800158c:	20000000 	.word	0x20000000
 8001590:	000f4240 	.word	0x000f4240

08001594 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	23e0      	movs	r3, #224	@ 0xe0
 800159e:	01db      	lsls	r3, r3, #7
 80015a0:	4013      	ands	r3, r2
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f000 fb50 	bl	8001c60 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d100      	bne.n	80015cc <HAL_RCC_OscConfig+0x20>
 80015ca:	e07c      	b.n	80016c6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015cc:	4bc3      	ldr	r3, [pc, #780]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2238      	movs	r2, #56	@ 0x38
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d6:	4bc1      	ldr	r3, [pc, #772]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2203      	movs	r2, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_OscConfig+0x40>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d002      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4bba      	ldr	r3, [pc, #744]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	029b      	lsls	r3, r3, #10
 80015fa:	4013      	ands	r3, r2
 80015fc:	d062      	beq.n	80016c4 <HAL_RCC_OscConfig+0x118>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d15e      	bne.n	80016c4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e32a      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	429a      	cmp	r2, r3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_OscConfig+0x7a>
 8001616:	4bb1      	ldr	r3, [pc, #708]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4bb0      	ldr	r3, [pc, #704]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800161c:	2180      	movs	r1, #128	@ 0x80
 800161e:	0249      	lsls	r1, r1, #9
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e020      	b.n	8001668 <HAL_RCC_OscConfig+0xbc>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	23a0      	movs	r3, #160	@ 0xa0
 800162c:	02db      	lsls	r3, r3, #11
 800162e:	429a      	cmp	r2, r3
 8001630:	d10e      	bne.n	8001650 <HAL_RCC_OscConfig+0xa4>
 8001632:	4baa      	ldr	r3, [pc, #680]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4ba9      	ldr	r3, [pc, #676]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	02c9      	lsls	r1, r1, #11
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	4ba6      	ldr	r3, [pc, #664]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4ba5      	ldr	r3, [pc, #660]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	0249      	lsls	r1, r1, #9
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xbc>
 8001650:	4ba2      	ldr	r3, [pc, #648]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba1      	ldr	r3, [pc, #644]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001656:	49a2      	ldr	r1, [pc, #648]	@ (80018e0 <HAL_RCC_OscConfig+0x334>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4b9f      	ldr	r3, [pc, #636]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b9e      	ldr	r3, [pc, #632]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001662:	49a0      	ldr	r1, [pc, #640]	@ (80018e4 <HAL_RCC_OscConfig+0x338>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fb3e 	bl	8000cf0 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167a:	f7ff fb39 	bl	8000cf0 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	@ 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e2e9      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168c:	4b93      	ldr	r3, [pc, #588]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0xce>
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb29 	bl	8000cf0 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fb24 	bl	8000cf0 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e2d4      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b6:	4b89      	ldr	r3, [pc, #548]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0xf8>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x126>
 80016d0:	e099      	b.n	8001806 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b82      	ldr	r3, [pc, #520]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2238      	movs	r2, #56	@ 0x38
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b7f      	ldr	r3, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x146>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d135      	bne.n	8001764 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f8:	4b78      	ldr	r3, [pc, #480]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4013      	ands	r3, r2
 8001702:	d005      	beq.n	8001710 <HAL_RCC_OscConfig+0x164>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e2a7      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a74      	ldr	r2, [pc, #464]	@ (80018e8 <HAL_RCC_OscConfig+0x33c>)
 8001716:	4013      	ands	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	021a      	lsls	r2, r3, #8
 8001720:	4b6e      	ldr	r3, [pc, #440]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172c:	4b6b      	ldr	r3, [pc, #428]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6e      	ldr	r2, [pc, #440]	@ (80018ec <HAL_RCC_OscConfig+0x340>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001740:	4b66      	ldr	r3, [pc, #408]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0adb      	lsrs	r3, r3, #11
 8001746:	2207      	movs	r2, #7
 8001748:	4013      	ands	r3, r2
 800174a:	4a69      	ldr	r2, [pc, #420]	@ (80018f0 <HAL_RCC_OscConfig+0x344>)
 800174c:	40da      	lsrs	r2, r3
 800174e:	4b69      	ldr	r3, [pc, #420]	@ (80018f4 <HAL_RCC_OscConfig+0x348>)
 8001750:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001752:	4b69      	ldr	r3, [pc, #420]	@ (80018f8 <HAL_RCC_OscConfig+0x34c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff fa6e 	bl	8000c38 <HAL_InitTick>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d051      	beq.n	8001804 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e27d      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d030      	beq.n	80017ce <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800176c:	4b5b      	ldr	r3, [pc, #364]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5e      	ldr	r2, [pc, #376]	@ (80018ec <HAL_RCC_OscConfig+0x340>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001780:	4b56      	ldr	r3, [pc, #344]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b55      	ldr	r3, [pc, #340]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001786:	2180      	movs	r1, #128	@ 0x80
 8001788:	0049      	lsls	r1, r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff faaf 	bl	8000cf0 <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff faaa 	bl	8000cf0 <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e25a      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017aa:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a4b      	ldr	r2, [pc, #300]	@ (80018e8 <HAL_RCC_OscConfig+0x33c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	021a      	lsls	r2, r3, #8
 80017c6:	4b45      	ldr	r3, [pc, #276]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e01b      	b.n	8001806 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b42      	ldr	r3, [pc, #264]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80017d4:	4949      	ldr	r1, [pc, #292]	@ (80018fc <HAL_RCC_OscConfig+0x350>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fa89 	bl	8000cf0 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fa84 	bl	8000cf0 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e234      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f6:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x238>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2208      	movs	r2, #8
 800180c:	4013      	ands	r3, r2
 800180e:	d047      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001810:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2238      	movs	r2, #56	@ 0x38
 8001816:	4013      	ands	r3, r2
 8001818:	2b18      	cmp	r3, #24
 800181a:	d10a      	bne.n	8001832 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800181c:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d03c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d138      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e216      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800183a:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 800183c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800183e:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fa53 	bl	8000cf0 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fa4e 	bl	8000cf0 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1fe      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d0f1      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a4>
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001870:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001874:	2101      	movs	r1, #1
 8001876:	438a      	bics	r2, r1
 8001878:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fa39 	bl	8000cf0 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fa34 	bl	8000cf0 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1e4      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d1f1      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2204      	movs	r2, #4
 80018a6:	4013      	ands	r3, r2
 80018a8:	d100      	bne.n	80018ac <HAL_RCC_OscConfig+0x300>
 80018aa:	e0c7      	b.n	8001a3c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	231f      	movs	r3, #31
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2238      	movs	r2, #56	@ 0x38
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d11f      	bne.n	8001900 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 80018c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x320>
 80018ca:	e0b7      	b.n	8001a3c <HAL_RCC_OscConfig+0x490>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d000      	beq.n	80018d6 <HAL_RCC_OscConfig+0x32a>
 80018d4:	e0b2      	b.n	8001a3c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c2      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffeffff 	.word	0xfffeffff
 80018e4:	fffbffff 	.word	0xfffbffff
 80018e8:	ffff80ff 	.word	0xffff80ff
 80018ec:	ffffc7ff 	.word	0xffffc7ff
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004
 80018fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001900:	4bb5      	ldr	r3, [pc, #724]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x364>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x366>
 8001910:	2300      	movs	r3, #0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d011      	beq.n	800193a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4bb0      	ldr	r3, [pc, #704]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800191a:	4baf      	ldr	r3, [pc, #700]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 800191c:	2180      	movs	r1, #128	@ 0x80
 800191e:	0549      	lsls	r1, r1, #21
 8001920:	430a      	orrs	r2, r1
 8001922:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001924:	4bac      	ldr	r3, [pc, #688]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001932:	231f      	movs	r3, #31
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4ba8      	ldr	r3, [pc, #672]	@ (8001bdc <HAL_RCC_OscConfig+0x630>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001946:	4ba5      	ldr	r3, [pc, #660]	@ (8001bdc <HAL_RCC_OscConfig+0x630>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4ba4      	ldr	r3, [pc, #656]	@ (8001bdc <HAL_RCC_OscConfig+0x630>)
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0049      	lsls	r1, r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001954:	f7ff f9cc 	bl	8000cf0 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff f9c7 	bl	8000cf0 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e177      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	4b9a      	ldr	r3, [pc, #616]	@ (8001bdc <HAL_RCC_OscConfig+0x630>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x3e6>
 8001984:	4b94      	ldr	r3, [pc, #592]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001986:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001988:	4b93      	ldr	r3, [pc, #588]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x420>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x408>
 800199a:	4b8f      	ldr	r3, [pc, #572]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 800199c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800199e:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019a0:	2104      	movs	r1, #4
 80019a2:	430a      	orrs	r2, r1
 80019a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019a6:	4b8c      	ldr	r3, [pc, #560]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0x420>
 80019b4:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019b8:	4b87      	ldr	r3, [pc, #540]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	438a      	bics	r2, r1
 80019be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019c0:	4b85      	ldr	r3, [pc, #532]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019c4:	4b84      	ldr	r3, [pc, #528]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019c6:	2104      	movs	r1, #4
 80019c8:	438a      	bics	r2, r1
 80019ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f98c 	bl	8000cf0 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff f987 	bl	8000cf0 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a7d      	ldr	r2, [pc, #500]	@ (8001be0 <HAL_RCC_OscConfig+0x634>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e136      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f2:	4b79      	ldr	r3, [pc, #484]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x432>
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f977 	bl	8000cf0 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a06:	e009      	b.n	8001a1c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f972 	bl	8000cf0 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a73      	ldr	r2, [pc, #460]	@ (8001be0 <HAL_RCC_OscConfig+0x634>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e121      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a26:	231f      	movs	r3, #31
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b69      	ldr	r3, [pc, #420]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a34:	4b68      	ldr	r3, [pc, #416]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a36:	496b      	ldr	r1, [pc, #428]	@ (8001be4 <HAL_RCC_OscConfig+0x638>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	4013      	ands	r3, r2
 8001a44:	d039      	beq.n	8001aba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a4e:	4b62      	ldr	r3, [pc, #392]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b61      	ldr	r3, [pc, #388]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	03c9      	lsls	r1, r1, #15
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f948 	bl	8000cf0 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a66:	f7ff f943 	bl	8000cf0 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0f3      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a78:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x4ba>
 8001a84:	e019      	b.n	8001aba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a86:	4b54      	ldr	r3, [pc, #336]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a8c:	4956      	ldr	r1, [pc, #344]	@ (8001be8 <HAL_RCC_OscConfig+0x63c>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f92d 	bl	8000cf0 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9c:	f7ff f928 	bl	8000cf0 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0d8      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aae:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x518>
 8001ac2:	e0cc      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2238      	movs	r2, #56	@ 0x38
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x526>
 8001ad0:	e07b      	b.n	8001bca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d156      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001ae0:	4942      	ldr	r1, [pc, #264]	@ (8001bec <HAL_RCC_OscConfig+0x640>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f903 	bl	8000cf0 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f8fe 	bl	8000cf0 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0ae      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	049b      	lsls	r3, r3, #18
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0e:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4a37      	ldr	r2, [pc, #220]	@ (8001bf0 <HAL_RCC_OscConfig+0x644>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b42:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0449      	lsls	r1, r1, #17
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	0549      	lsls	r1, r1, #21
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f8c7 	bl	8000cf0 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f8c2 	bl	8000cf0 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e072      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	049b      	lsls	r3, r3, #18
 8001b82:	4013      	ands	r3, r2
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x5bc>
 8001b86:	e06a      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b8e:	4917      	ldr	r1, [pc, #92]	@ (8001bec <HAL_RCC_OscConfig+0x640>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f8ac 	bl	8000cf0 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff f8a7 	bl	8000cf0 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e057      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	049b      	lsls	r3, r3, #18
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001bc2:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <HAL_RCC_OscConfig+0x648>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	e049      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e044      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	00001388 	.word	0x00001388
 8001be4:	efffffff 	.word	0xefffffff
 8001be8:	ffbfffff 	.word	0xffbfffff
 8001bec:	feffffff 	.word	0xfeffffff
 8001bf0:	11c1808c 	.word	0x11c1808c
 8001bf4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_RCC_OscConfig+0x6bc>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2203      	movs	r2, #3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d126      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2270      	movs	r2, #112	@ 0x70
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d11f      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	23fe      	movs	r3, #254	@ 0xfe
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d116      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	23f8      	movs	r3, #248	@ 0xf8
 8001c30:	039b      	lsls	r3, r3, #14
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10e      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23e0      	movs	r3, #224	@ 0xe0
 8001c40:	051b      	lsls	r3, r3, #20
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	0f5b      	lsrs	r3, r3, #29
 8001c50:	075a      	lsls	r2, r3, #29
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b008      	add	sp, #32
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0e9      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2207      	movs	r2, #7
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d91e      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2207      	movs	r2, #7
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f826 	bl	8000cf0 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7ff f821 	bl	8000cf0 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0ca      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbe:	4b67      	ldr	r3, [pc, #412]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d006      	beq.n	8001cee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ce0:	4b60      	ldr	r3, [pc, #384]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce6:	21e0      	movs	r1, #224	@ 0xe0
 8001ce8:	01c9      	lsls	r1, r1, #7
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cee:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e68 <HAL_RCC_ClockConfig+0x1fc>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4b59      	ldr	r3, [pc, #356]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d057      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d14:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	@ 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d12b      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e097      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	049b      	lsls	r3, r3, #18
 8001d34:	4013      	ands	r3, r2
 8001d36:	d11f      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e08b      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d113      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e07f      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5c:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e074      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e06d      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d8c:	f7fe ffb0 	bl	8000cf0 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	e009      	b.n	8001daa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7fe ffab 	bl	8000cf0 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e054      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2238      	movs	r2, #56	@ 0x38
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1ec      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d21e      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe ff88 	bl	8000cf0 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7fe ff83 	bl	8000cf0 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e02c      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a15      	ldr	r2, [pc, #84]	@ (8001e6c <HAL_RCC_ClockConfig+0x200>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e26:	f000 f829 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e2a:	0001      	movs	r1, r0
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	220f      	movs	r2, #15
 8001e34:	401a      	ands	r2, r3
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_RCC_ClockConfig+0x204>)
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	58d3      	ldr	r3, [r2, r3]
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	4013      	ands	r3, r2
 8001e40:	000a      	movs	r2, r1
 8001e42:	40da      	lsrs	r2, r3
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_RCC_ClockConfig+0x208>)
 8001e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_RCC_ClockConfig+0x20c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7fe fef3 	bl	8000c38 <HAL_InitTick>
 8001e52:	0003      	movs	r3, r0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b004      	add	sp, #16
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	00001388 	.word	0x00001388
 8001e64:	40021000 	.word	0x40021000
 8001e68:	fffff0ff 	.word	0xfffff0ff
 8001e6c:	ffff8fff 	.word	0xffff8fff
 8001e70:	0800340c 	.word	0x0800340c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2238      	movs	r2, #56	@ 0x38
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d10f      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e8c:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0adb      	lsrs	r3, r3, #11
 8001e92:	2207      	movs	r2, #7
 8001e94:	4013      	ands	r3, r2
 8001e96:	2201      	movs	r2, #1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	4835      	ldr	r0, [pc, #212]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ea2:	f7fe f92f 	bl	8000104 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e05d      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2238      	movs	r2, #56	@ 0x38
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e054      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2238      	movs	r2, #56	@ 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d138      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eca:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	2207      	movs	r2, #7
 8001edc:	4013      	ands	r3, r2
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	4824      	ldr	r0, [pc, #144]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eec:	f7fe f90a 	bl	8000104 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	227f      	movs	r2, #127	@ 0x7f
 8001efc:	4013      	ands	r3, r2
 8001efe:	434b      	muls	r3, r1
 8001f00:	617b      	str	r3, [r7, #20]
        break;
 8001f02:	e00d      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	481c      	ldr	r0, [pc, #112]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f08:	f7fe f8fc 	bl	8000104 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	227f      	movs	r2, #127	@ 0x7f
 8001f18:	4013      	ands	r3, r2
 8001f1a:	434b      	muls	r3, r1
 8001f1c:	617b      	str	r3, [r7, #20]
        break;
 8001f1e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0f5b      	lsrs	r3, r3, #29
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	6978      	ldr	r0, [r7, #20]
 8001f32:	f7fe f8e7 	bl	8000104 <__udivsi3>
 8001f36:	0003      	movs	r3, r0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e015      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2238      	movs	r2, #56	@ 0x38
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d103      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2238      	movs	r2, #56	@ 0x38
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	d103      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f5c:	23fa      	movs	r3, #250	@ 0xfa
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e001      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f68:	693b      	ldr	r3, [r7, #16]
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b006      	add	sp, #24
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b02      	ldr	r3, [pc, #8]	@ (8001f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f98:	f7ff fff2 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	f7ff faf9 	bl	8001594 <LL_RCC_GetAPB1Prescaler>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	0b1a      	lsrs	r2, r3, #12
 8001fa6:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	58d3      	ldr	r3, [r2, r3]
 8001fac:	221f      	movs	r2, #31
 8001fae:	4013      	ands	r3, r2
 8001fb0:	40dc      	lsrs	r4, r3
 8001fb2:	0023      	movs	r3, r4
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	0800344c 	.word	0x0800344c

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fc8:	2313      	movs	r3, #19
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fe4:	e0ad      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2011      	movs	r0, #17
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	055b      	lsls	r3, r3, #21
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d110      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b44      	ldr	r3, [pc, #272]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ffe:	4b43      	ldr	r3, [pc, #268]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002000:	2180      	movs	r1, #128	@ 0x80
 8002002:	0549      	lsls	r1, r1, #21
 8002004:	430a      	orrs	r2, r1
 8002006:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002008:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800200a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	183b      	adds	r3, r7, r0
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b3c      	ldr	r3, [pc, #240]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	0049      	lsls	r1, r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800202a:	f7fe fe61 	bl	8000cf0 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002032:	e00b      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe fe5c 	bl	8000cf0 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d904      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002042:	2313      	movs	r3, #19
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2203      	movs	r2, #3
 8002048:	701a      	strb	r2, [r3, #0]
        break;
 800204a:	e005      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800204c:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d0ed      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002058:	2313      	movs	r3, #19
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d15e      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002062:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002066:	23c0      	movs	r3, #192	@ 0xc0
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4013      	ands	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	429a      	cmp	r2, r3
 800207c:	d014      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800207e:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002088:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800208a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800208e:	2180      	movs	r1, #128	@ 0x80
 8002090:	0249      	lsls	r1, r1, #9
 8002092:	430a      	orrs	r2, r1
 8002094:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002096:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002098:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800209c:	491e      	ldr	r1, [pc, #120]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800209e:	400a      	ands	r2, r1
 80020a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d016      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fe1e 	bl	8000cf0 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00c      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fe19 	bl	8000cf0 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a15      	ldr	r2, [pc, #84]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d904      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020ca:	2313      	movs	r3, #19
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2203      	movs	r2, #3
 80020d0:	701a      	strb	r2, [r3, #0]
            break;
 80020d2:	e004      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d4:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d0ed      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020de:	2313      	movs	r3, #19
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020fc:	e016      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020fe:	2312      	movs	r3, #18
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2213      	movs	r2, #19
 8002104:	18ba      	adds	r2, r7, r2
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e00f      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	fffffcff 	.word	0xfffffcff
 8002118:	fffeffff 	.word	0xfffeffff
 800211c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	2312      	movs	r3, #18
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2213      	movs	r2, #19
 8002126:	18ba      	adds	r2, r7, r2
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212c:	2311      	movs	r3, #17
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4bb6      	ldr	r3, [pc, #728]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800213a:	4bb5      	ldr	r3, [pc, #724]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213c:	49b5      	ldr	r1, [pc, #724]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800213e:	400a      	ands	r2, r1
 8002140:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214c:	4bb0      	ldr	r3, [pc, #704]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	2203      	movs	r2, #3
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4bad      	ldr	r3, [pc, #692]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215c:	430a      	orrs	r2, r1
 800215e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800216a:	4ba9      	ldr	r3, [pc, #676]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	220c      	movs	r2, #12
 8002170:	4393      	bics	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4ba5      	ldr	r3, [pc, #660]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217a:	430a      	orrs	r2, r1
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002188:	4ba1      	ldr	r3, [pc, #644]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	2230      	movs	r2, #48	@ 0x30
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b9e      	ldr	r3, [pc, #632]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002198:	430a      	orrs	r2, r1
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	4013      	ands	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	4b96      	ldr	r3, [pc, #600]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	@ 0x80
 80021c0:	015b      	lsls	r3, r3, #5
 80021c2:	4013      	ands	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021c6:	4b92      	ldr	r3, [pc, #584]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	4a94      	ldr	r2, [pc, #592]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	4a8d      	ldr	r2, [pc, #564]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021f4:	4b86      	ldr	r3, [pc, #536]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002206:	4b82      	ldr	r3, [pc, #520]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	4a86      	ldr	r2, [pc, #536]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002214:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002216:	430a      	orrs	r2, r1
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2220      	movs	r2, #32
 8002220:	4013      	ands	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002224:	4b7a      	ldr	r3, [pc, #488]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002228:	4a7f      	ldr	r2, [pc, #508]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	4b77      	ldr	r3, [pc, #476]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002234:	430a      	orrs	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002242:	4b73      	ldr	r3, [pc, #460]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	4a79      	ldr	r2, [pc, #484]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	01db      	lsls	r3, r3, #7
 800225e:	4013      	ands	r3, r2
 8002260:	d015      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002262:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	0899      	lsrs	r1, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800226e:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002270:	430a      	orrs	r2, r1
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	05db      	lsls	r3, r3, #23
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002280:	4b63      	ldr	r3, [pc, #396]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4b62      	ldr	r3, [pc, #392]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002286:	2180      	movs	r1, #128	@ 0x80
 8002288:	0249      	lsls	r1, r1, #9
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	4013      	ands	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022a8:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	4013      	ands	r3, r2
 80022b8:	d016      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ba:	4b55      	ldr	r3, [pc, #340]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022be:	4a5c      	ldr	r2, [pc, #368]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022c8:	4b51      	ldr	r3, [pc, #324]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	03db      	lsls	r3, r3, #15
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022da:	4b4d      	ldr	r3, [pc, #308]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	0449      	lsls	r1, r1, #17
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	03db      	lsls	r3, r3, #15
 80022f0:	4013      	ands	r3, r2
 80022f2:	d016      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022f4:	4b46      	ldr	r3, [pc, #280]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002304:	430a      	orrs	r2, r1
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	045b      	lsls	r3, r3, #17
 8002310:	429a      	cmp	r2, r3
 8002312:	d106      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002314:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	0449      	lsls	r1, r1, #17
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4013      	ands	r3, r2
 800232c:	d014      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800232e:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	2203      	movs	r2, #3
 8002334:	4393      	bics	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800233e:	430a      	orrs	r2, r1
 8002340:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800234a:	4b31      	ldr	r3, [pc, #196]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	0249      	lsls	r1, r1, #9
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	019b      	lsls	r3, r3, #6
 8002360:	4013      	ands	r3, r2
 8002362:	d014      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	220c      	movs	r2, #12
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002372:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002374:	430a      	orrs	r2, r1
 8002376:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d106      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002380:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	0249      	lsls	r1, r1, #9
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	045b      	lsls	r3, r3, #17
 8002396:	4013      	ands	r3, r2
 8002398:	d016      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0449      	lsls	r1, r1, #17
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	049b      	lsls	r3, r3, #18
 80023d0:	4013      	ands	r3, r2
 80023d2:	d016      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	4a10      	ldr	r2, [pc, #64]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fa:	2180      	movs	r1, #128	@ 0x80
 80023fc:	0449      	lsls	r1, r1, #17
 80023fe:	430a      	orrs	r2, r1
 8002400:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002402:	2312      	movs	r3, #18
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b006      	add	sp, #24
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	efffffff 	.word	0xefffffff
 8002418:	fffff3ff 	.word	0xfffff3ff
 800241c:	fffffcff 	.word	0xfffffcff
 8002420:	fff3ffff 	.word	0xfff3ffff
 8002424:	ffcfffff 	.word	0xffcfffff
 8002428:	ffffcfff 	.word	0xffffcfff
 800242c:	ffff3fff 	.word	0xffff3fff
 8002430:	ffbfffff 	.word	0xffbfffff
 8002434:	feffffff 	.word	0xfeffffff

08002438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0a8      	b.n	800259c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	2382      	movs	r3, #130	@ 0x82
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	429a      	cmp	r2, r3
 800245c:	d009      	beq.n	8002472 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	61da      	str	r2, [r3, #28]
 8002464:	e005      	b.n	8002472 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	225d      	movs	r2, #93	@ 0x5d
 800247c:	5c9b      	ldrb	r3, [r3, r2]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	225c      	movs	r2, #92	@ 0x5c
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f7fe fabe 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	225d      	movs	r2, #93	@ 0x5d
 8002498:	2102      	movs	r1, #2
 800249a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2140      	movs	r1, #64	@ 0x40
 80024a8:	438a      	bics	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	23e0      	movs	r3, #224	@ 0xe0
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d902      	bls.n	80024be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e002      	b.n	80024c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	015b      	lsls	r3, r3, #5
 80024c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	23f0      	movs	r3, #240	@ 0xf0
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d008      	beq.n	80024e2 <HAL_SPI_Init+0xaa>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	23e0      	movs	r3, #224	@ 0xe0
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	429a      	cmp	r2, r3
 80024da:	d002      	beq.n	80024e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	2382      	movs	r3, #130	@ 0x82
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	2384      	movs	r3, #132	@ 0x84
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	400b      	ands	r3, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2102      	movs	r1, #2
 80024fe:	400b      	ands	r3, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2101      	movs	r1, #1
 8002508:	400b      	ands	r3, r1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6999      	ldr	r1, [r3, #24]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	400b      	ands	r3, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2138      	movs	r1, #56	@ 0x38
 800251e:	400b      	ands	r3, r1
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	400b      	ands	r3, r1
 800252a:	431a      	orrs	r2, r3
 800252c:	0011      	movs	r1, r2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	2204      	movs	r2, #4
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	2110      	movs	r1, #16
 8002550:	400b      	ands	r3, r1
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002558:	2108      	movs	r1, #8
 800255a:	400b      	ands	r3, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	23f0      	movs	r3, #240	@ 0xf0
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	400b      	ands	r3, r1
 8002568:	431a      	orrs	r2, r3
 800256a:	0011      	movs	r1, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <HAL_SPI_Init+0x16c>)
 8002588:	400a      	ands	r2, r1
 800258a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	225d      	movs	r2, #93	@ 0x5d
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	fffff7ff 	.word	0xfffff7ff

080025a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e046      	b.n	8002648 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2288      	movs	r2, #136	@ 0x88
 80025be:	589b      	ldr	r3, [r3, r2]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2284      	movs	r2, #132	@ 0x84
 80025c8:	2100      	movs	r1, #0
 80025ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7fe fa68 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2288      	movs	r2, #136	@ 0x88
 80025d8:	2124      	movs	r1, #36	@ 0x24
 80025da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	438a      	bics	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fb82 	bl	8002d00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f828 	bl	8002654 <UART_SetConfig>
 8002604:	0003      	movs	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e01c      	b.n	8002648 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	490d      	ldr	r1, [pc, #52]	@ (8002650 <HAL_UART_Init+0xa8>)
 800261a:	400a      	ands	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	212a      	movs	r1, #42	@ 0x2a
 800262a:	438a      	bics	r2, r1
 800262c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f000 fc11 	bl	8002e68 <UART_CheckIdleState>
 8002646:	0003      	movs	r3, r0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}
 8002650:	ffffb7ff 	.word	0xffffb7ff

08002654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	b090      	sub	sp, #64	@ 0x40
 8002658:	af00      	add	r7, sp, #0
 800265a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800265c:	231a      	movs	r3, #26
 800265e:	2220      	movs	r2, #32
 8002660:	189b      	adds	r3, r3, r2
 8002662:	19db      	adds	r3, r3, r7
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	431a      	orrs	r2, r3
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4313      	orrs	r3, r2
 800267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4ac1      	ldr	r2, [pc, #772]	@ (800298c <UART_SetConfig+0x338>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002692:	430b      	orrs	r3, r1
 8002694:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4abc      	ldr	r2, [pc, #752]	@ (8002990 <UART_SetConfig+0x33c>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	0003      	movs	r3, r0
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4ab6      	ldr	r2, [pc, #728]	@ (8002994 <UART_SetConfig+0x340>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <UART_SetConfig+0x80>
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4ab4      	ldr	r2, [pc, #720]	@ (8002998 <UART_SetConfig+0x344>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026d0:	4313      	orrs	r3, r2
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4ab0      	ldr	r2, [pc, #704]	@ (800299c <UART_SetConfig+0x348>)
 80026dc:	4013      	ands	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	220f      	movs	r2, #15
 80026f2:	4393      	bics	r3, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	0003      	movs	r3, r0
 8002700:	430b      	orrs	r3, r1
 8002702:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4aa5      	ldr	r2, [pc, #660]	@ (80029a0 <UART_SetConfig+0x34c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d131      	bne.n	8002772 <UART_SetConfig+0x11e>
 800270e:	4ba5      	ldr	r3, [pc, #660]	@ (80029a4 <UART_SetConfig+0x350>)
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	2203      	movs	r2, #3
 8002714:	4013      	ands	r3, r2
 8002716:	2b03      	cmp	r3, #3
 8002718:	d01d      	beq.n	8002756 <UART_SetConfig+0x102>
 800271a:	d823      	bhi.n	8002764 <UART_SetConfig+0x110>
 800271c:	2b02      	cmp	r3, #2
 800271e:	d00c      	beq.n	800273a <UART_SetConfig+0xe6>
 8002720:	d820      	bhi.n	8002764 <UART_SetConfig+0x110>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <UART_SetConfig+0xd8>
 8002726:	2b01      	cmp	r3, #1
 8002728:	d00e      	beq.n	8002748 <UART_SetConfig+0xf4>
 800272a:	e01b      	b.n	8002764 <UART_SetConfig+0x110>
 800272c:	231b      	movs	r3, #27
 800272e:	2220      	movs	r2, #32
 8002730:	189b      	adds	r3, r3, r2
 8002732:	19db      	adds	r3, r3, r7
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e154      	b.n	80029e4 <UART_SetConfig+0x390>
 800273a:	231b      	movs	r3, #27
 800273c:	2220      	movs	r2, #32
 800273e:	189b      	adds	r3, r3, r2
 8002740:	19db      	adds	r3, r3, r7
 8002742:	2202      	movs	r2, #2
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e14d      	b.n	80029e4 <UART_SetConfig+0x390>
 8002748:	231b      	movs	r3, #27
 800274a:	2220      	movs	r2, #32
 800274c:	189b      	adds	r3, r3, r2
 800274e:	19db      	adds	r3, r3, r7
 8002750:	2204      	movs	r2, #4
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e146      	b.n	80029e4 <UART_SetConfig+0x390>
 8002756:	231b      	movs	r3, #27
 8002758:	2220      	movs	r2, #32
 800275a:	189b      	adds	r3, r3, r2
 800275c:	19db      	adds	r3, r3, r7
 800275e:	2208      	movs	r2, #8
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e13f      	b.n	80029e4 <UART_SetConfig+0x390>
 8002764:	231b      	movs	r3, #27
 8002766:	2220      	movs	r2, #32
 8002768:	189b      	adds	r3, r3, r2
 800276a:	19db      	adds	r3, r3, r7
 800276c:	2210      	movs	r2, #16
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e138      	b.n	80029e4 <UART_SetConfig+0x390>
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a8c      	ldr	r2, [pc, #560]	@ (80029a8 <UART_SetConfig+0x354>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d131      	bne.n	80027e0 <UART_SetConfig+0x18c>
 800277c:	4b89      	ldr	r3, [pc, #548]	@ (80029a4 <UART_SetConfig+0x350>)
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	220c      	movs	r2, #12
 8002782:	4013      	ands	r3, r2
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d01d      	beq.n	80027c4 <UART_SetConfig+0x170>
 8002788:	d823      	bhi.n	80027d2 <UART_SetConfig+0x17e>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d00c      	beq.n	80027a8 <UART_SetConfig+0x154>
 800278e:	d820      	bhi.n	80027d2 <UART_SetConfig+0x17e>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <UART_SetConfig+0x146>
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00e      	beq.n	80027b6 <UART_SetConfig+0x162>
 8002798:	e01b      	b.n	80027d2 <UART_SetConfig+0x17e>
 800279a:	231b      	movs	r3, #27
 800279c:	2220      	movs	r2, #32
 800279e:	189b      	adds	r3, r3, r2
 80027a0:	19db      	adds	r3, r3, r7
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e11d      	b.n	80029e4 <UART_SetConfig+0x390>
 80027a8:	231b      	movs	r3, #27
 80027aa:	2220      	movs	r2, #32
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	19db      	adds	r3, r3, r7
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e116      	b.n	80029e4 <UART_SetConfig+0x390>
 80027b6:	231b      	movs	r3, #27
 80027b8:	2220      	movs	r2, #32
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	19db      	adds	r3, r3, r7
 80027be:	2204      	movs	r2, #4
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e10f      	b.n	80029e4 <UART_SetConfig+0x390>
 80027c4:	231b      	movs	r3, #27
 80027c6:	2220      	movs	r2, #32
 80027c8:	189b      	adds	r3, r3, r2
 80027ca:	19db      	adds	r3, r3, r7
 80027cc:	2208      	movs	r2, #8
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e108      	b.n	80029e4 <UART_SetConfig+0x390>
 80027d2:	231b      	movs	r3, #27
 80027d4:	2220      	movs	r2, #32
 80027d6:	189b      	adds	r3, r3, r2
 80027d8:	19db      	adds	r3, r3, r7
 80027da:	2210      	movs	r2, #16
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e101      	b.n	80029e4 <UART_SetConfig+0x390>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a71      	ldr	r2, [pc, #452]	@ (80029ac <UART_SetConfig+0x358>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d131      	bne.n	800284e <UART_SetConfig+0x1fa>
 80027ea:	4b6e      	ldr	r3, [pc, #440]	@ (80029a4 <UART_SetConfig+0x350>)
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	2230      	movs	r2, #48	@ 0x30
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b30      	cmp	r3, #48	@ 0x30
 80027f4:	d01d      	beq.n	8002832 <UART_SetConfig+0x1de>
 80027f6:	d823      	bhi.n	8002840 <UART_SetConfig+0x1ec>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d00c      	beq.n	8002816 <UART_SetConfig+0x1c2>
 80027fc:	d820      	bhi.n	8002840 <UART_SetConfig+0x1ec>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <UART_SetConfig+0x1b4>
 8002802:	2b10      	cmp	r3, #16
 8002804:	d00e      	beq.n	8002824 <UART_SetConfig+0x1d0>
 8002806:	e01b      	b.n	8002840 <UART_SetConfig+0x1ec>
 8002808:	231b      	movs	r3, #27
 800280a:	2220      	movs	r2, #32
 800280c:	189b      	adds	r3, r3, r2
 800280e:	19db      	adds	r3, r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e0e6      	b.n	80029e4 <UART_SetConfig+0x390>
 8002816:	231b      	movs	r3, #27
 8002818:	2220      	movs	r2, #32
 800281a:	189b      	adds	r3, r3, r2
 800281c:	19db      	adds	r3, r3, r7
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e0df      	b.n	80029e4 <UART_SetConfig+0x390>
 8002824:	231b      	movs	r3, #27
 8002826:	2220      	movs	r2, #32
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2204      	movs	r2, #4
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e0d8      	b.n	80029e4 <UART_SetConfig+0x390>
 8002832:	231b      	movs	r3, #27
 8002834:	2220      	movs	r2, #32
 8002836:	189b      	adds	r3, r3, r2
 8002838:	19db      	adds	r3, r3, r7
 800283a:	2208      	movs	r2, #8
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e0d1      	b.n	80029e4 <UART_SetConfig+0x390>
 8002840:	231b      	movs	r3, #27
 8002842:	2220      	movs	r2, #32
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2210      	movs	r2, #16
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e0ca      	b.n	80029e4 <UART_SetConfig+0x390>
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a57      	ldr	r2, [pc, #348]	@ (80029b0 <UART_SetConfig+0x35c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d106      	bne.n	8002866 <UART_SetConfig+0x212>
 8002858:	231b      	movs	r3, #27
 800285a:	2220      	movs	r2, #32
 800285c:	189b      	adds	r3, r3, r2
 800285e:	19db      	adds	r3, r3, r7
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e0be      	b.n	80029e4 <UART_SetConfig+0x390>
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a52      	ldr	r2, [pc, #328]	@ (80029b4 <UART_SetConfig+0x360>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d106      	bne.n	800287e <UART_SetConfig+0x22a>
 8002870:	231b      	movs	r3, #27
 8002872:	2220      	movs	r2, #32
 8002874:	189b      	adds	r3, r3, r2
 8002876:	19db      	adds	r3, r3, r7
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e0b2      	b.n	80029e4 <UART_SetConfig+0x390>
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a4d      	ldr	r2, [pc, #308]	@ (80029b8 <UART_SetConfig+0x364>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d106      	bne.n	8002896 <UART_SetConfig+0x242>
 8002888:	231b      	movs	r3, #27
 800288a:	2220      	movs	r2, #32
 800288c:	189b      	adds	r3, r3, r2
 800288e:	19db      	adds	r3, r3, r7
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e0a6      	b.n	80029e4 <UART_SetConfig+0x390>
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a3e      	ldr	r2, [pc, #248]	@ (8002994 <UART_SetConfig+0x340>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d13e      	bne.n	800291e <UART_SetConfig+0x2ca>
 80028a0:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <UART_SetConfig+0x350>)
 80028a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028a4:	23c0      	movs	r3, #192	@ 0xc0
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	22c0      	movs	r2, #192	@ 0xc0
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d027      	beq.n	8002902 <UART_SetConfig+0x2ae>
 80028b2:	22c0      	movs	r2, #192	@ 0xc0
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d82a      	bhi.n	8002910 <UART_SetConfig+0x2bc>
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	4293      	cmp	r3, r2
 80028c0:	d011      	beq.n	80028e6 <UART_SetConfig+0x292>
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d822      	bhi.n	8002910 <UART_SetConfig+0x2bc>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <UART_SetConfig+0x284>
 80028ce:	2280      	movs	r2, #128	@ 0x80
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <UART_SetConfig+0x2a0>
 80028d6:	e01b      	b.n	8002910 <UART_SetConfig+0x2bc>
 80028d8:	231b      	movs	r3, #27
 80028da:	2220      	movs	r2, #32
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	19db      	adds	r3, r3, r7
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e07e      	b.n	80029e4 <UART_SetConfig+0x390>
 80028e6:	231b      	movs	r3, #27
 80028e8:	2220      	movs	r2, #32
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	19db      	adds	r3, r3, r7
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e077      	b.n	80029e4 <UART_SetConfig+0x390>
 80028f4:	231b      	movs	r3, #27
 80028f6:	2220      	movs	r2, #32
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	19db      	adds	r3, r3, r7
 80028fc:	2204      	movs	r2, #4
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e070      	b.n	80029e4 <UART_SetConfig+0x390>
 8002902:	231b      	movs	r3, #27
 8002904:	2220      	movs	r2, #32
 8002906:	189b      	adds	r3, r3, r2
 8002908:	19db      	adds	r3, r3, r7
 800290a:	2208      	movs	r2, #8
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e069      	b.n	80029e4 <UART_SetConfig+0x390>
 8002910:	231b      	movs	r3, #27
 8002912:	2220      	movs	r2, #32
 8002914:	189b      	adds	r3, r3, r2
 8002916:	19db      	adds	r3, r3, r7
 8002918:	2210      	movs	r2, #16
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e062      	b.n	80029e4 <UART_SetConfig+0x390>
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <UART_SetConfig+0x344>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d157      	bne.n	80029d8 <UART_SetConfig+0x384>
 8002928:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <UART_SetConfig+0x350>)
 800292a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800292c:	23c0      	movs	r3, #192	@ 0xc0
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4013      	ands	r3, r2
 8002932:	22c0      	movs	r2, #192	@ 0xc0
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	4293      	cmp	r3, r2
 8002938:	d040      	beq.n	80029bc <UART_SetConfig+0x368>
 800293a:	22c0      	movs	r2, #192	@ 0xc0
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	4293      	cmp	r3, r2
 8002940:	d843      	bhi.n	80029ca <UART_SetConfig+0x376>
 8002942:	2280      	movs	r2, #128	@ 0x80
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	4293      	cmp	r3, r2
 8002948:	d011      	beq.n	800296e <UART_SetConfig+0x31a>
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4293      	cmp	r3, r2
 8002950:	d83b      	bhi.n	80029ca <UART_SetConfig+0x376>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <UART_SetConfig+0x30c>
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	0052      	lsls	r2, r2, #1
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <UART_SetConfig+0x328>
 800295e:	e034      	b.n	80029ca <UART_SetConfig+0x376>
 8002960:	231b      	movs	r3, #27
 8002962:	2220      	movs	r2, #32
 8002964:	189b      	adds	r3, r3, r2
 8002966:	19db      	adds	r3, r3, r7
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e03a      	b.n	80029e4 <UART_SetConfig+0x390>
 800296e:	231b      	movs	r3, #27
 8002970:	2220      	movs	r2, #32
 8002972:	189b      	adds	r3, r3, r2
 8002974:	19db      	adds	r3, r3, r7
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e033      	b.n	80029e4 <UART_SetConfig+0x390>
 800297c:	231b      	movs	r3, #27
 800297e:	2220      	movs	r2, #32
 8002980:	189b      	adds	r3, r3, r2
 8002982:	19db      	adds	r3, r3, r7
 8002984:	2204      	movs	r2, #4
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e02c      	b.n	80029e4 <UART_SetConfig+0x390>
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	cfff69f3 	.word	0xcfff69f3
 8002990:	ffffcfff 	.word	0xffffcfff
 8002994:	40008000 	.word	0x40008000
 8002998:	40008400 	.word	0x40008400
 800299c:	11fff4ff 	.word	0x11fff4ff
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40004400 	.word	0x40004400
 80029ac:	40004800 	.word	0x40004800
 80029b0:	40004c00 	.word	0x40004c00
 80029b4:	40005000 	.word	0x40005000
 80029b8:	40013c00 	.word	0x40013c00
 80029bc:	231b      	movs	r3, #27
 80029be:	2220      	movs	r2, #32
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	19db      	adds	r3, r3, r7
 80029c4:	2208      	movs	r2, #8
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e00c      	b.n	80029e4 <UART_SetConfig+0x390>
 80029ca:	231b      	movs	r3, #27
 80029cc:	2220      	movs	r2, #32
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	19db      	adds	r3, r3, r7
 80029d2:	2210      	movs	r2, #16
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e005      	b.n	80029e4 <UART_SetConfig+0x390>
 80029d8:	231b      	movs	r3, #27
 80029da:	2220      	movs	r2, #32
 80029dc:	189b      	adds	r3, r3, r2
 80029de:	19db      	adds	r3, r3, r7
 80029e0:	2210      	movs	r2, #16
 80029e2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4ac1      	ldr	r2, [pc, #772]	@ (8002cf0 <UART_SetConfig+0x69c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d005      	beq.n	80029fa <UART_SetConfig+0x3a6>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4ac0      	ldr	r2, [pc, #768]	@ (8002cf4 <UART_SetConfig+0x6a0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d000      	beq.n	80029fa <UART_SetConfig+0x3a6>
 80029f8:	e093      	b.n	8002b22 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029fa:	231b      	movs	r3, #27
 80029fc:	2220      	movs	r2, #32
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	19db      	adds	r3, r3, r7
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d015      	beq.n	8002a34 <UART_SetConfig+0x3e0>
 8002a08:	dc18      	bgt.n	8002a3c <UART_SetConfig+0x3e8>
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d00d      	beq.n	8002a2a <UART_SetConfig+0x3d6>
 8002a0e:	dc15      	bgt.n	8002a3c <UART_SetConfig+0x3e8>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <UART_SetConfig+0x3c6>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d005      	beq.n	8002a24 <UART_SetConfig+0x3d0>
 8002a18:	e010      	b.n	8002a3c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1a:	f7ff fabb 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a22:	e014      	b.n	8002a4e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a24:	4bb4      	ldr	r3, [pc, #720]	@ (8002cf8 <UART_SetConfig+0x6a4>)
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a28:	e011      	b.n	8002a4e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2a:	f7ff fa27 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a32:	e00c      	b.n	8002a4e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a3a:	e008      	b.n	8002a4e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002a40:	231a      	movs	r3, #26
 8002a42:	2220      	movs	r2, #32
 8002a44:	189b      	adds	r3, r3, r2
 8002a46:	19db      	adds	r3, r3, r7
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
        break;
 8002a4c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d100      	bne.n	8002a56 <UART_SetConfig+0x402>
 8002a54:	e135      	b.n	8002cc2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5a:	4ba8      	ldr	r3, [pc, #672]	@ (8002cfc <UART_SetConfig+0x6a8>)
 8002a5c:	0052      	lsls	r2, r2, #1
 8002a5e:	5ad3      	ldrh	r3, [r2, r3]
 8002a60:	0019      	movs	r1, r3
 8002a62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a64:	f7fd fb4e 	bl	8000104 <__udivsi3>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	0013      	movs	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	189b      	adds	r3, r3, r2
 8002a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d305      	bcc.n	8002a88 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d906      	bls.n	8002a96 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002a88:	231a      	movs	r3, #26
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	19db      	adds	r3, r3, r7
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e044      	b.n	8002b20 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa2:	4b96      	ldr	r3, [pc, #600]	@ (8002cfc <UART_SetConfig+0x6a8>)
 8002aa4:	0052      	lsls	r2, r2, #1
 8002aa6:	5ad3      	ldrh	r3, [r2, r3]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	69b8      	ldr	r0, [r7, #24]
 8002ab4:	69f9      	ldr	r1, [r7, #28]
 8002ab6:	f7fd fc9b 	bl	80003f0 <__aeabi_uldivmod>
 8002aba:	0002      	movs	r2, r0
 8002abc:	000b      	movs	r3, r1
 8002abe:	0e11      	lsrs	r1, r2, #24
 8002ac0:	021d      	lsls	r5, r3, #8
 8002ac2:	430d      	orrs	r5, r1
 8002ac4:	0214      	lsls	r4, r2, #8
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68b8      	ldr	r0, [r7, #8]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	1900      	adds	r0, r0, r4
 8002ad8:	4169      	adcs	r1, r5
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f7fd fc82 	bl	80003f0 <__aeabi_uldivmod>
 8002aec:	0002      	movs	r2, r0
 8002aee:	000b      	movs	r3, r1
 8002af0:	0013      	movs	r3, r2
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af6:	23c0      	movs	r3, #192	@ 0xc0
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d309      	bcc.n	8002b12 <UART_SetConfig+0x4be>
 8002afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	035b      	lsls	r3, r3, #13
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d204      	bcs.n	8002b12 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	e006      	b.n	8002b20 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002b12:	231a      	movs	r3, #26
 8002b14:	2220      	movs	r2, #32
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	19db      	adds	r3, r3, r7
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002b1e:	e0d0      	b.n	8002cc2 <UART_SetConfig+0x66e>
 8002b20:	e0cf      	b.n	8002cc2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d000      	beq.n	8002b30 <UART_SetConfig+0x4dc>
 8002b2e:	e070      	b.n	8002c12 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002b30:	231b      	movs	r3, #27
 8002b32:	2220      	movs	r2, #32
 8002b34:	189b      	adds	r3, r3, r2
 8002b36:	19db      	adds	r3, r3, r7
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d015      	beq.n	8002b6a <UART_SetConfig+0x516>
 8002b3e:	dc18      	bgt.n	8002b72 <UART_SetConfig+0x51e>
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00d      	beq.n	8002b60 <UART_SetConfig+0x50c>
 8002b44:	dc15      	bgt.n	8002b72 <UART_SetConfig+0x51e>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <UART_SetConfig+0x4fc>
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d005      	beq.n	8002b5a <UART_SetConfig+0x506>
 8002b4e:	e010      	b.n	8002b72 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7ff fa20 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002b54:	0003      	movs	r3, r0
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b58:	e014      	b.n	8002b84 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5a:	4b67      	ldr	r3, [pc, #412]	@ (8002cf8 <UART_SetConfig+0x6a4>)
 8002b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b5e:	e011      	b.n	8002b84 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b60:	f7ff f98c 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002b64:	0003      	movs	r3, r0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b68:	e00c      	b.n	8002b84 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b70:	e008      	b.n	8002b84 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002b76:	231a      	movs	r3, #26
 8002b78:	2220      	movs	r2, #32
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	19db      	adds	r3, r3, r7
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
        break;
 8002b82:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d100      	bne.n	8002b8c <UART_SetConfig+0x538>
 8002b8a:	e09a      	b.n	8002cc2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b90:	4b5a      	ldr	r3, [pc, #360]	@ (8002cfc <UART_SetConfig+0x6a8>)
 8002b92:	0052      	lsls	r2, r2, #1
 8002b94:	5ad3      	ldrh	r3, [r2, r3]
 8002b96:	0019      	movs	r1, r3
 8002b98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b9a:	f7fd fab3 	bl	8000104 <__udivsi3>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	005a      	lsls	r2, r3, #1
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	18d2      	adds	r2, r2, r3
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f7fd faa7 	bl	8000104 <__udivsi3>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d921      	bls.n	8002c04 <UART_SetConfig+0x5b0>
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bc2:	2380      	movs	r3, #128	@ 0x80
 8002bc4:	025b      	lsls	r3, r3, #9
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d21c      	bcs.n	8002c04 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	200e      	movs	r0, #14
 8002bd0:	2420      	movs	r4, #32
 8002bd2:	1903      	adds	r3, r0, r4
 8002bd4:	19db      	adds	r3, r3, r7
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	438a      	bics	r2, r1
 8002bda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	b299      	uxth	r1, r3
 8002be8:	1903      	adds	r3, r0, r4
 8002bea:	19db      	adds	r3, r3, r7
 8002bec:	1902      	adds	r2, r0, r4
 8002bee:	19d2      	adds	r2, r2, r7
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1902      	adds	r2, r0, r4
 8002bfc:	19d2      	adds	r2, r2, r7
 8002bfe:	8812      	ldrh	r2, [r2, #0]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e05e      	b.n	8002cc2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2220      	movs	r2, #32
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e057      	b.n	8002cc2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c12:	231b      	movs	r3, #27
 8002c14:	2220      	movs	r2, #32
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d015      	beq.n	8002c4c <UART_SetConfig+0x5f8>
 8002c20:	dc18      	bgt.n	8002c54 <UART_SetConfig+0x600>
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d00d      	beq.n	8002c42 <UART_SetConfig+0x5ee>
 8002c26:	dc15      	bgt.n	8002c54 <UART_SetConfig+0x600>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <UART_SetConfig+0x5de>
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d005      	beq.n	8002c3c <UART_SetConfig+0x5e8>
 8002c30:	e010      	b.n	8002c54 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c32:	f7ff f9af 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002c36:	0003      	movs	r3, r0
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c3a:	e014      	b.n	8002c66 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf8 <UART_SetConfig+0x6a4>)
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c40:	e011      	b.n	8002c66 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c42:	f7ff f91b 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002c46:	0003      	movs	r3, r0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c4a:	e00c      	b.n	8002c66 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c52:	e008      	b.n	8002c66 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002c58:	231a      	movs	r3, #26
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
        break;
 8002c64:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02a      	beq.n	8002cc2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c70:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <UART_SetConfig+0x6a8>)
 8002c72:	0052      	lsls	r2, r2, #1
 8002c74:	5ad3      	ldrh	r3, [r2, r3]
 8002c76:	0019      	movs	r1, r3
 8002c78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c7a:	f7fd fa43 	bl	8000104 <__udivsi3>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	001a      	movs	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	18d2      	adds	r2, r2, r3
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f7fd fa37 	bl	8000104 <__udivsi3>
 8002c96:	0003      	movs	r3, r0
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d90a      	bls.n	8002cb6 <UART_SetConfig+0x662>
 8002ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	025b      	lsls	r3, r3, #9
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d205      	bcs.n	8002cb6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	e005      	b.n	8002cc2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb6:	231a      	movs	r3, #26
 8002cb8:	2220      	movs	r2, #32
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	19db      	adds	r3, r3, r7
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	226a      	movs	r2, #106	@ 0x6a
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	2268      	movs	r2, #104	@ 0x68
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	2200      	movs	r2, #0
 8002cdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002cde:	231a      	movs	r3, #26
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	19db      	adds	r3, r3, r7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b010      	add	sp, #64	@ 0x40
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf0:	40008000 	.word	0x40008000
 8002cf4:	40008400 	.word	0x40008400
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	0800346c 	.word	0x0800346c

08002d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a4a      	ldr	r2, [pc, #296]	@ (8002e44 <UART_AdvFeatureConfig+0x144>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a43      	ldr	r2, [pc, #268]	@ (8002e48 <UART_AdvFeatureConfig+0x148>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e4c <UART_AdvFeatureConfig+0x14c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	2204      	movs	r2, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <UART_AdvFeatureConfig+0x150>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	2210      	movs	r2, #16
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <UART_AdvFeatureConfig+0x154>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4a25      	ldr	r2, [pc, #148]	@ (8002e58 <UART_AdvFeatureConfig+0x158>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <UART_AdvFeatureConfig+0x15c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	035b      	lsls	r3, r3, #13
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d10b      	bne.n	8002e1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <UART_AdvFeatureConfig+0x160>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <UART_AdvFeatureConfig+0x164>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  }
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	ffff7fff 	.word	0xffff7fff
 8002e48:	fffdffff 	.word	0xfffdffff
 8002e4c:	fffeffff 	.word	0xfffeffff
 8002e50:	fffbffff 	.word	0xfffbffff
 8002e54:	ffffefff 	.word	0xffffefff
 8002e58:	ffffdfff 	.word	0xffffdfff
 8002e5c:	ffefffff 	.word	0xffefffff
 8002e60:	ff9fffff 	.word	0xff9fffff
 8002e64:	fff7ffff 	.word	0xfff7ffff

08002e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b092      	sub	sp, #72	@ 0x48
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2290      	movs	r2, #144	@ 0x90
 8002e74:	2100      	movs	r1, #0
 8002e76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e78:	f7fd ff3a 	bl	8000cf0 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2208      	movs	r2, #8
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d12d      	bne.n	8002eea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e90:	2280      	movs	r2, #128	@ 0x80
 8002e92:	0391      	lsls	r1, r2, #14
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4a47      	ldr	r2, [pc, #284]	@ (8002fb4 <UART_CheckIdleState+0x14c>)
 8002e98:	9200      	str	r2, [sp, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f000 f88e 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002ea0:	1e03      	subs	r3, r0, #0
 8002ea2:	d022      	beq.n	8002eea <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2180      	movs	r1, #128	@ 0x80
 8002ec6:	438a      	bics	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2288      	movs	r2, #136	@ 0x88
 8002eda:	2120      	movs	r1, #32
 8002edc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2284      	movs	r2, #132	@ 0x84
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e060      	b.n	8002fac <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d146      	bne.n	8002f86 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	03d1      	lsls	r1, r2, #15
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb4 <UART_CheckIdleState+0x14c>)
 8002f02:	9200      	str	r2, [sp, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f000 f859 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d03b      	beq.n	8002f86 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f14:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f18:	2301      	movs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f383 8810 	msr	PRIMASK, r3
}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4922      	ldr	r1, [pc, #136]	@ (8002fb8 <UART_CheckIdleState+0x150>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f40:	f3ef 8310 	mrs	r3, PRIMASK
 8002f44:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f46:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	438a      	bics	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	228c      	movs	r2, #140	@ 0x8c
 8002f76:	2120      	movs	r1, #32
 8002f78:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2284      	movs	r2, #132	@ 0x84
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e012      	b.n	8002fac <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2288      	movs	r2, #136	@ 0x88
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	228c      	movs	r2, #140	@ 0x8c
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2284      	movs	r2, #132	@ 0x84
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b010      	add	sp, #64	@ 0x40
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	01ffffff 	.word	0x01ffffff
 8002fb8:	fffffedf 	.word	0xfffffedf

08002fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	e051      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	d04e      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fd fe8c 	bl	8000cf0 <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e051      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b80      	cmp	r3, #128	@ 0x80
 8002ffe:	d038      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	d035      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	2b08      	cmp	r3, #8
 8003012:	d111      	bne.n	8003038 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2208      	movs	r2, #8
 800301a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f83c 	bl	800309c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2290      	movs	r2, #144	@ 0x90
 8003028:	2108      	movs	r1, #8
 800302a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2284      	movs	r2, #132	@ 0x84
 8003030:	2100      	movs	r1, #0
 8003032:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02c      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	401a      	ands	r2, r3
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	429a      	cmp	r2, r3
 800304a:	d112      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f81f 	bl	800309c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2290      	movs	r2, #144	@ 0x90
 8003062:	2120      	movs	r1, #32
 8003064:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2284      	movs	r2, #132	@ 0x84
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e00f      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	425a      	negs	r2, r3
 8003082:	4153      	adcs	r3, r2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	001a      	movs	r2, r3
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d09e      	beq.n	8002fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	@ 0x38
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a4:	f3ef 8310 	mrs	r3, PRIMASK
 80030a8:	617b      	str	r3, [r7, #20]
  return(result);
 80030aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ae:	2301      	movs	r3, #1
 80030b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4926      	ldr	r1, [pc, #152]	@ (8003160 <UART_EndRxTransfer+0xc4>)
 80030c6:	400a      	ands	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d6:	f3ef 8310 	mrs	r3, PRIMASK
 80030da:	623b      	str	r3, [r7, #32]
  return(result);
 80030dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030de:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e0:	2301      	movs	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	f383 8810 	msr	PRIMASK, r3
}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	491b      	ldr	r1, [pc, #108]	@ (8003164 <UART_EndRxTransfer+0xc8>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d118      	bne.n	8003142 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003110:	f3ef 8310 	mrs	r3, PRIMASK
 8003114:	60bb      	str	r3, [r7, #8]
  return(result);
 8003116:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311a:	2301      	movs	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2110      	movs	r1, #16
 8003132:	438a      	bics	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	228c      	movs	r2, #140	@ 0x8c
 8003146:	2120      	movs	r1, #32
 8003148:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b00e      	add	sp, #56	@ 0x38
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	fffffedf 	.word	0xfffffedf
 8003164:	effffffe 	.word	0xeffffffe

08003168 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2284      	movs	r2, #132	@ 0x84
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_UARTEx_DisableFifoMode+0x16>
 800317a:	2302      	movs	r3, #2
 800317c:	e027      	b.n	80031ce <HAL_UARTEx_DisableFifoMode+0x66>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2284      	movs	r2, #132	@ 0x84
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2288      	movs	r2, #136	@ 0x88
 800318a:	2124      	movs	r1, #36	@ 0x24
 800318c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	438a      	bics	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2288      	movs	r2, #136	@ 0x88
 80031c0:	2120      	movs	r1, #32
 80031c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2284      	movs	r2, #132	@ 0x84
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	dfffffff 	.word	0xdfffffff

080031dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2284      	movs	r2, #132	@ 0x84
 80031ea:	5c9b      	ldrb	r3, [r3, r2]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e02e      	b.n	8003252 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2284      	movs	r2, #132	@ 0x84
 80031f8:	2101      	movs	r1, #1
 80031fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2288      	movs	r2, #136	@ 0x88
 8003200:	2124      	movs	r1, #36	@ 0x24
 8003202:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	438a      	bics	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	08d9      	lsrs	r1, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 f854 	bl	80032e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2288      	movs	r2, #136	@ 0x88
 8003244:	2120      	movs	r1, #32
 8003246:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2284      	movs	r2, #132	@ 0x84
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b004      	add	sp, #16
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2284      	movs	r2, #132	@ 0x84
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e02f      	b.n	80032d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2284      	movs	r2, #132	@ 0x84
 8003278:	2101      	movs	r1, #1
 800327a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2288      	movs	r2, #136	@ 0x88
 8003280:	2124      	movs	r1, #36	@ 0x24
 8003282:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4a0e      	ldr	r2, [pc, #56]	@ (80032dc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f813 	bl	80032e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2288      	movs	r2, #136	@ 0x88
 80032c6:	2120      	movs	r1, #32
 80032c8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2284      	movs	r2, #132	@ 0x84
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b004      	add	sp, #16
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	f1ffffff 	.word	0xf1ffffff

080032e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	226a      	movs	r2, #106	@ 0x6a
 80032f4:	2101      	movs	r1, #1
 80032f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2268      	movs	r2, #104	@ 0x68
 80032fc:	2101      	movs	r1, #1
 80032fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003300:	e043      	b.n	800338a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003302:	260f      	movs	r6, #15
 8003304:	19bb      	adds	r3, r7, r6
 8003306:	2208      	movs	r2, #8
 8003308:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800330a:	200e      	movs	r0, #14
 800330c:	183b      	adds	r3, r7, r0
 800330e:	2208      	movs	r2, #8
 8003310:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	0e5b      	lsrs	r3, r3, #25
 800331a:	b2da      	uxtb	r2, r3
 800331c:	240d      	movs	r4, #13
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2107      	movs	r1, #7
 8003322:	400a      	ands	r2, r1
 8003324:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	0f5b      	lsrs	r3, r3, #29
 800332e:	b2da      	uxtb	r2, r3
 8003330:	250c      	movs	r5, #12
 8003332:	197b      	adds	r3, r7, r5
 8003334:	2107      	movs	r1, #7
 8003336:	400a      	ands	r2, r1
 8003338:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800333a:	183b      	adds	r3, r7, r0
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	197a      	adds	r2, r7, r5
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	4914      	ldr	r1, [pc, #80]	@ (8003394 <UARTEx_SetNbDataToProcess+0xb4>)
 8003344:	5c8a      	ldrb	r2, [r1, r2]
 8003346:	435a      	muls	r2, r3
 8003348:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800334a:	197b      	adds	r3, r7, r5
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <UARTEx_SetNbDataToProcess+0xb8>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003352:	0019      	movs	r1, r3
 8003354:	f7fc ff60 	bl	8000218 <__divsi3>
 8003358:	0003      	movs	r3, r0
 800335a:	b299      	uxth	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	226a      	movs	r2, #106	@ 0x6a
 8003360:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003362:	19bb      	adds	r3, r7, r6
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	193a      	adds	r2, r7, r4
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	490a      	ldr	r1, [pc, #40]	@ (8003394 <UARTEx_SetNbDataToProcess+0xb4>)
 800336c:	5c8a      	ldrb	r2, [r1, r2]
 800336e:	435a      	muls	r2, r3
 8003370:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003372:	193b      	adds	r3, r7, r4
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <UARTEx_SetNbDataToProcess+0xb8>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800337a:	0019      	movs	r1, r3
 800337c:	f7fc ff4c 	bl	8000218 <__divsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	b299      	uxth	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2268      	movs	r2, #104	@ 0x68
 8003388:	5299      	strh	r1, [r3, r2]
}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b005      	add	sp, #20
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	08003484 	.word	0x08003484
 8003398:	0800348c 	.word	0x0800348c

0800339c <memset>:
 800339c:	0003      	movs	r3, r0
 800339e:	1882      	adds	r2, r0, r2
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	2600      	movs	r6, #0
 80033b0:	4c0c      	ldr	r4, [pc, #48]	@ (80033e4 <__libc_init_array+0x38>)
 80033b2:	4d0d      	ldr	r5, [pc, #52]	@ (80033e8 <__libc_init_array+0x3c>)
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	2600      	movs	r6, #0
 80033be:	f000 f819 	bl	80033f4 <_init>
 80033c2:	4c0a      	ldr	r4, [pc, #40]	@ (80033ec <__libc_init_array+0x40>)
 80033c4:	4d0a      	ldr	r5, [pc, #40]	@ (80033f0 <__libc_init_array+0x44>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	00b3      	lsls	r3, r6, #2
 80033d2:	58eb      	ldr	r3, [r5, r3]
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	00b3      	lsls	r3, r6, #2
 80033dc:	58eb      	ldr	r3, [r5, r3]
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	0800349c 	.word	0x0800349c
 80033e8:	0800349c 	.word	0x0800349c
 80033ec:	080034a0 	.word	0x080034a0
 80033f0:	0800349c 	.word	0x0800349c

080033f4 <_init>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fa:	bc08      	pop	{r3}
 80033fc:	469e      	mov	lr, r3
 80033fe:	4770      	bx	lr

08003400 <_fini>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr
